parsers: # array
  - reg: ^.*$ 
  # - reg: ^.*$ 匹配所有订阅，或  - url: https://example.com/profile.yaml 指定订阅
  # 下面是删除服务商自带的策略组和规则
    code: |
      module.exports.parse = (raw, { yaml }) => {
        const rawObj = yaml.parse(raw)
        const groups = []
        const rules = []
        return yaml.stringify({ ...rawObj, 'proxy-groups': groups, rules })
      } 
  # 建立自己的配置
    yaml:
      prepend-proxy-groups: # 建立策略组
      - name: 🔰 选择节点
        type: select
        proxies:
          - DIRECT
          - ♻ 自动选择
          - ⚖️ 负载均衡-轮询
          - ⚖️ 负载均衡-散列

      - name: 📺 哔哩哔哩
        type: select
        proxies:
          - DIRECT
          - ♻ 港澳台自动

      - name: 📺 巴哈姆特
        type: select
        proxies:
          - 🔰 选择节点
          - DIRECT

      - name: 🎮 Steam 客户端地区
        type: select
        proxies:
          - DIRECT
          - 🔰 选择节点

      - name: ☁️ Cloudflare
        type: select
        proxies:
          - 🔰 选择节点
          - 🐟 漏网之鱼
          - DIRECT

      - name: 🎎 YouTube
        type: select
        proxies:
          - DIRECT
          - 🔰 选择节点
          - ⏳ YouTube-Url-Test
         
      - name: ⏳ YouTube-Url-Test
        type: url-test
        url: https://www.youtube.com/
        interval: 120
        lazy: true
        tolerance: 100
        proxies:
            - REJECT
            - DIRECT

      - name: 📽 Netflix
        type: select
        proxies:
          - DIRECT
          - 🔰 选择节点

      - name: 🦤 Twitter
        type: select
        proxies:
          - DIRECT
          - 🔰 选择节点

      - name: 🤖 OpenAI
        type: select
        proxies:
          - DIRECT
          - 🔰 选择节点

      - name: 🔍 Bing
        type: select
        proxies:
          - DIRECT
          - 🔰 选择节点

      - name: 🇨🇳 国内网站
        type: select
        proxies:
          - DIRECT
          - 🔰 选择节点

      - name: 🛑 拦截广告
        type: select
        proxies:
          - REJECT
          - DIRECT
          - 🔰 选择节点

      - name: 🐟 漏网之鱼
        type: select
        proxies:
          - 🔰 选择节点
          - DIRECT

      - name: ♻ 自动选择
        type: url-test
        url: http://www.gstatic.com/generate_204
        interval: 300

      - name: ♻ 港澳台自动
        type: url-test
        url: http://www.gstatic.com/generate_204
        interval: 300

      - name: ⚖️ 负载均衡-散列
        type: load-balance
        url: http://www.google.com/generate_204
        interval: 300
        strategy: consistent-hashing

      - name: ⚖️ 负载均衡-轮询
        type: load-balance
        url: http://www.google.com/generate_204
        interval: 300
        strategy: round-robin

              
  # 策略组示例
      # - name: 分组名
        # type: select       # 手动选点   
        # url-test     # 自动选择延迟最低的节点
        # fallback     # 节点故障时自动切换下一个
        # laod-balance # 均衡使用分组内的节点
        # url: http://www.gstatic.com/generate_204 # 测试地址 非select类型分组必要
        # interval: 300 # 自动测试间隔时间，单位秒 非select类型分组必要
        # tolerance: 50 # 允许的偏差，节点之间延迟差小于该值不切换 非必要
        # proxies:  
          # - 节点名称或其他分组套娃
          
      commands:
        - proxy-groups.🔰 选择节点.proxies.4+[]proxyNames
        - proxy-groups.📺 哔哩哔哩.proxies.2+[]proxyNames|港|香港|🇭🇰|HK|Hong Kong|台|台湾|新北|彰化|TW|Taiwan
        - proxy-groups.📺 巴哈姆特.proxies.2+[]proxyNames台|台湾|新北|彰化|TW|Taiwan
        - proxy-groups.🎎 YouTube.proxies.3+[]proxyNames
        - proxy-groups.⏳ YouTube-Url-Test.proxies=[]proxyNames
        - proxy-groups.📽 Netflix.proxies.2+[]proxyNames
        - proxy-groups.✈️ telegram.proxies.2+[]proxyNames
        - proxy-groups.🎮 Steam 客户端地区.proxies.2+[]proxyNames
        - proxy-groups.♻ 自动选择.proxies=[]proxyNames
        - proxy-groups.♻ 港澳台自动.proxies=[]proxyNames|港|香港|🇭🇰|HK|Hong Kong|台|台湾|新北|彰化|TW|Taiwan
        - mixed-port=7890

        - proxy-groups.⚖️ 负载均衡-散列.proxies=[]proxyNames
        - proxy-groups.⚖️ 负载均衡-轮询.proxies=[]proxyNames

        # - proxy-groups.节点名字.proxies.0+DIRECT # 向指定分组第一个位置添加一个 DIRECT 节点名
        # 一些可能用到的正则过滤节点示例，使分组更细致
        # []proxyNames|a                         # 包含a
        # []proxyNames|^(.*)(a|b)+(.*)$          # 包含a或b
        # []proxyNames|^(?=.*a)(?=.*b).*$        # 包含a和b
        # []proxyNames|^((?!b).)*a((?!b).)*$     # 包含a且不包含b
        # []proxyNames|^((?!b|c).)*a((?!b|c).)*$ # 包含a且不包含b或c
        # 更多正则教程，请看这里：https://deerchao.cn/tutorials/regex/regex.htm#top
        
  # 添加规则
      prepend-rules: # 规则由上往下遍历，如上面规则已经命中，则不再往下处理
        - RULE-SET,youtube,🎎 YouTube
        - RULE-SET,netflix,📽 Netflix
        - RULE-SET,openai,🤖 OpenAI
        - RULE-SET,bing,🔍 Bing
        - RULE-SET,bilibili,📺 哔哩哔哩
        - RULE-SET,Bahamut,📺 巴哈姆特
        - RULE-SET,twitter,🦤 Twitter
        - RULE-SET,github,🔰 选择节点
        - RULE-SET,Cloudflare,☁️ Cloudflare
        - RULE-SET,applications,🇨🇳 国内网站
        - DOMAIN,clash.razord.top,🇨🇳 国内网站
        - DOMAIN,yacd.haishan.me,🇨🇳 国内网站
        - RULE-SET,private,🇨🇳 国内网站
        - RULE-SET,reject,🛑 拦截广告
        - RULE-SET,icloud,🇨🇳 国内网站 #
        - RULE-SET,apple,🇨🇳 国内网站 # 这三个为国内可直连地址，如果希望走代理改为🔰 选择节点
        - RULE-SET,google,🔰 选择节点 # 
        - RULE-SET,googledrive,🔰 选择节点 # 
        - RULE-SET,googlesearch,🔰 选择节点 # 
        - RULE-SET,tld-not-cn,🔰 选择节点
        - RULE-SET,gfw,🔰 选择节点
        - RULE-SET,greatfire,🔰 选择节点
        - RULE-SET,telegramcidr,🔰 选择节点
        - RULE-SET,lancidr,🇨🇳 国内网站
        - RULE-SET,cncidr,🇨🇳 国内网站
        - GEOIP,,🇨🇳 国内网站
        - GEOIP,CN,🇨🇳 国内网站
        - RULE-SET,direct,🇨🇳 国内网站
        - RULE-SET,proxy,🔰 选择节点
        - MATCH,🐟 漏网之鱼 # ⭐️⭐️规则之外的，在这里来修改是白名单模式还是黑名单模式，具体在“🐟 漏网之鱼”选择代理或直连。

      # 添加规则集
        # DOMAIN-SUFFIX：域名后缀匹配
        # DOMAIN：域名匹配
        # DOMAIN-KEYWORD：域名关键字匹配
        # IP-CIDR：IP段匹配
        # SRC-IP-CIDR：源IP段匹配
        # GEOIP：GEOIP数据库（国家代码）匹配
        # DST-PORT：目标端口匹配
        # SRC-PORT：源端口匹配
        # PROCESS-NAME：源进程名匹配
        # RULE-SET：Rule Provider规则匹配
        # MATCH：全匹配

  # 添加规则集
      mix-rule-providers: 
        reject: # 广告域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/reject.txt"
          path: ./ruleset/reject.yaml
          interval: 86400
          
        icloud: # iCloud 域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/icloud.txt"
          path: ./ruleset/icloud.yaml
          interval: 86400
          
        apple: # Apple 在中国大陆可直连的域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/apple.txt"
          path: ./ruleset/apple.yaml
          interval: 86400
          
        google: # Google 在中国大陆可直连的域名列表
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Google/Google.yaml"
          path: ./ruleset/google.yaml
          interval: 86400
          
        googledrive: # 
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/GoogleDrive/GoogleDrive.yaml"
          path: ./ruleset/googledrive.yaml
          interval: 86400

        googlesearch: # 
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/GoogleSearch/GoogleSearch.yaml"
          path: ./ruleset/googlesearch.yaml
          interval: 86400

        proxy: # 代理域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/proxy.txt"
          path: ./ruleset/proxy.yaml
          interval: 86400
          
        direct: # 直连域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/direct.txt"
          path: ./ruleset/direct.yaml
          interval: 86400
          
        private: # 私有网络专用域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/private.txt"
          path: ./ruleset/private.yaml
          interval: 86400
          
        gfw: # GFWList 域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/gfw.txt"
          path: ./ruleset/gfw.yaml
          interval: 86400
          
        greatfire: # GreatFire 域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/greatfire.txt"
          path: ./ruleset/greatfire.yaml
          interval: 86400
          
        tld-not-cn: # 非中国大陆使用的顶级域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/tld-not-cn.txt"
          path: ./ruleset/tld-not-cn.yaml
          interval: 86400
          
        telegramcidr: # Telegram 使用的 IP 地址列表
          type: http
          behavior: ipcidr
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/telegramcidr.txt"
          path: ./ruleset/telegramcidr.yaml
          interval: 86400
          
        cncidr: # 中国大陆 IP 地址列表
          type: http
          behavior: ipcidr
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/cncidr.txt"
          path: ./ruleset/cncidr.yaml
          interval: 86400
          
        lancidr: # 局域网 IP 及保留 IP 地址列表
          type: http
          behavior: ipcidr
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/lancidr.txt"
          path: ./ruleset/lancidr.yaml
          interval: 86400
          
        applications: # 需要直连的常见软件列表
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/applications.txt"
          path: ./ruleset/applications.yaml
          interval: 86400

        netflix: # 奈飞的分流规则
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/release/rule/Clash/Netflix/Netflix.yaml"
          path: ./ruleset/netflix.yaml
          interval: 86400

        bing: # Bing的分流规则
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Bing/Bing.yaml"
          path: ./ruleset/bing.yaml
          interval: 86400

        openai: # OpenAI的分流规则
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/OpenAI/OpenAI.yaml"
          path: ./ruleset/openai.yaml
          interval: 86400    

        youtube: # YouTube的分流规则
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/YouTube/YouTube.yaml"
          path: ./ruleset/youtube.yaml
          interval: 86400    

        bilibili: # BiliBili的分流规则
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Bilibili.yaml"
          path: ./ruleset/bilibili.yaml
          interval: 86400    

        Bahamut: # Bahamut的分流规则
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Bahamut.yaml"
          path: ./ruleset/Bahamut.yaml
          interval: 86400    

        twitter: # twitter的分流规则
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Twitter/Twitter.yaml"
          path: ./ruleset/twitter.yaml
          interval: 86400    

        github: # github的分流规则
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/GitHub/GitHub.yaml"
          path: ./ruleset/github.yaml
          interval: 86400    

        Cloudflare: # Cloudflare的分流规则
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Cloudflare/Cloudflare.yaml"
          path: ./ruleset/Cloudflare.yaml
          interval: 86400    
